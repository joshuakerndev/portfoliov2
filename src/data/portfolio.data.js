const PORTFOLIO_DATA = [
    {
        title:"flash",
        url: "https://flash-clc.herokuapp.com/",
        image: "flash.jpg",
        description: "A front-end flash card app/study assistant built in React. Built specifically as a Chinese/English language study tool, it could be used for other subjects as well. Decks of flash cards are stored in local storage, and both decks and their individual cards can be created, edited, or deleted. The cards flip over on click. A study page allows users to cycle through cards and study them one-by-one. A 'shuffle' button will shuffle the deck for the study session. A quiz game is available to test the user's knowledge of a particular deck of cards, in which the user will be given multiple choices for the Chinese translation of the English word. Points are scored for correct answers, three wrong answers will end the game, and high score is stored and updated in local storage. All wrong answers are randomized per question. Built using hooks, global state is handled with Redux.",
        features: ["Redux", "Responsive design that will not break on mobile", "Smooth card-flipping animation", "Organized, customizable decks of cards", "Quiz game to aid in studying", "Logic for shuffling cards, randomizing answers, and error-free system for keeping track of and displaying all data", "Convenient use of local storage keeps everything in the front end"],
        whatILearned: ["When to use Global State, and when to use Local State in React components", "Various card-flip animation techniques", "Proper use of useState and useEffect hooks to handle data", "How to dispatch to multiple reducers in tandem to accomplish different state changes at the same time, while also keeping it organized and from messing itself up", "How to handle more complex local storage operations (i.e. instead of just overwriting a single value, parsing storage, selectively editing values nested a couple layers deep in arrays and objects, then saving it to local storage again without causing errors)", "How to use outside tools (Responsively) to quickly create a responsive design that works on mobile much faster than I could before, saving a lot of time on development", "Common issues that come from styling React apps due to React creating many <div> elements (such as complications with setting height) and how to solve them"],
        thingsToDo: ["Customize alerts", "Add icon for browser", "Add custom sound effects and music", "Add Context to allow users to switch between seeing the English side first or the Chinese side first, allowing users to choose whether to study/quiz themselves on either side of the card"]
    },
    {
        title: "BoSTRent",
        url: "https://calm-brushlands-43036.herokuapp.com",
        image: "bostrent.jpg",
        description: "This is my biggest project to date, and is the one I am most proud of. I built this site myself from scratch. Built in React as a full-stack MERN application with a MongoDB database, hosted on Heroku. This site authenticates users and allows them to book short term rental listings. Sign up, choose a listing, book a room, and visit your profile to receive confidential address location and check in instruction information, only delivered once payment is successful. NOTE: Be careful about the website url. There is already a website with the url 'bostrent.com', which is not my work. It is a model created by somebody else for this project. My own work can only be linked to through the above heroku url.",
        features: ["Redux / Redux Thunk", "Stripe payments", "JWT user authentication", "Full-stack system for handling payments, creating reservations, updating listings and available/unavailable dates", "Datepicker calendar that blocks appropriate dates once a user makes a reservation", "Dynamic content, including listings, price, available dates based on data from the back-end", "Secure information such as listing addresses, check in instructions, and door codes are stored safely on the back-end and only made available for users with paid reservations (i.e. no keeping sensitive data in redux state or local state except for authorized users)", "Propery subscribed/unsubscribed axios calls in useEffect to ensure no memory leaks", "Google Maps API integrated", "Multiple third party libraries to add functionality, including React Router Hash Link library for scroll effect on Navbar click", "Responsive grid design to fit any screen", "Express routes for handling data", "Mongoose / MongoDB structured to organize multiple schemas and collections of data, including Users, Listings, Reservations, Requests For Reservations, etc." ],
        whatILearned: ["Layout patterns, how to create responsive behavior with large numbers of different and different-sized elements on the same page", "How to write multiple Mongoose schemas and models for intuitive data organization", "How to set up a Node server with Express for both a development environment as well as a production build", "How to set up MongoDB's URI to connect with the back-end and serve data", "How to implement Redux for state management into a React app", "Multiple ways to handle API calls in single-page applications, including async calls inside Component Did Mount or in the useEffect hook, using a ternary operator in-line to ensure nothing loads unless the data is there, using a ternary operator to load an alternative spinner animation while data is loading or unavailable, or in some cases setting default props to empty values", "How to implement Redux Thunk for async Redux functionality", "How to implement the Google Maps API", "How to implement React Router and match by id to generate specific URLs for each unique listing", "How to convert a class-based component to use hooks, and vice versa", "How to integrate React's new hooks useReducer and useState to work alongside Redux seamlessly in cases where third party libraries must be adapted to dissimilar components in the application", "How to process Stripe payments, and how to use the token{} feature to process reservations after confirming successful payment", "How to handle API calls when multiple pieces of data to/from different collections must move around at the same time", "When to use local state as opposed to global Redux state (i.e. Some things shouldn't be in the Redux global state when they are sensitive pieces of data only needed in one component)", "How to create private routes that check if a user is authenticated", "How to hash and salt passwords"],
        thingsToDo: ["Tweak layout of 'About' and 'Contact' sections to fit smallest mobile sizes", "Sort by price or dates available", "Implement GPS coordinates to give a general location bubble on Google Maps", "In-app messaging service for customers to directly communicate with the listing owner in the site to mitigate the need for relying on email"]
    },
    {
        title: "CRWN-Clothing",
        url: "https://crown-clothing-clc.herokuapp.com",
        image: "crownclothing.jpg",
        description: "My first front-end e-commerce application, it was a large project as part of a Udemy course I took. I learned a lot about things like user authentication, Firebase, and how to process Stripe payments.",
        features: ["Redux / Redux Sagas for state management", "SCSS styling", "Drop-down shopping cart", "Log-in and Sign-up authentication with Firebase, sessions", "Checkout Page with front-end Stripe payments", "On-click 'add to cart' functionality", "Ability to add or remove items at Checkout", "Multiple categories of products", "Memoization through using selectors", ],
        whatILearned: ["How to use Redux: Actions, Types, Reducers, Store, and how to manage each", "Redux Sagas for handling async Redux without using Redux Thunk", "Memoization for help in controlling state", "Firebase, how to use it, and how it can be a useful tool for quick Google account authentication", "How to deploy to Heroku using the terminal and CLI", "How to handle nested routes using React Router", "How to architect a basic e-commerce website front-end from the ground-up" ],
        thingsToDo: ["Make mobile-responsive breakpoints. Right now, it is completely non-mobile-friendly", "Create some sort of 'Payment Confirmation' screen with customer reciept", "Integrate shipping pricing options as well as a sales tax calculator", "Create 'Contact' page", "Explore re-styling to make more unique", "Add an 'Upcoming Fashion' page to give customers a nice photo gallery of upcoming products for pre-order"]
    },
    {
        title: "Lights Out!",
        url: "https://lights-out-clc.herokuapp.com",
        image: "lightsout.jpg",
        description: "A browser version of the popular game 'Lights Out', as part of a Udemy course. This application renders a grid-based game board comprised of 'cell' components with an 'on/off' state, which is passed up to the parent component via function, which then triggers other cells to toggle on or off, and keeps track of the state of the game as a whole. The game is won when every light has been turned out.",
        features: ["Internal state, game logic is entirely front-end"],
        whatILearned: ["How to pass state between React components", "A great exercise for learning how data flow in React works, as well as a puzzle as to how to create the logic of the game"],
        thingsToDo: ["Make game scale to smaller screens, most likely through responsive breakpoints", "Add sound effects", "Add a glow/light change effect to the color squares", "Integrate some sort of timer or point-based system with leaderboard", "Re-style to make more unique"]
    }
];

export default PORTFOLIO_DATA;